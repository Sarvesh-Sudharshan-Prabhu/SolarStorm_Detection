// This is an autogenerated file from Firebase Studio. DO NOT EDIT.
'use client';

import { LayoutGrid } from 'lucide-react';
import {
  Table,
  TableHeader,
  TableBody,
  TableRow,
  TableHead,
  TableCell,
} from '@/components/ui/table';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import type { ConfusionMatrixData, GeoeffectivenessLevel } from '@/types';
import { useEffect, useState } from 'react';

const categories: GeoeffectivenessLevel[] = ["Low", "Moderate", "High", "Severe", "Extreme"];

const generateMockConfusionMatrix = (): number[][] => {
  const size = categories.length;
  const matrix = Array(size).fill(null).map(() => Array(size).fill(0));

  // Simulate data for ~100 total predictions, with higher accuracy on diagonal
  matrix[0][0] = 20; // Actual Low, Predicted Low
  matrix[0][1] = 1;  // Actual Low, Predicted Moderate
  matrix[0][2] = 1;
  matrix[0][3] = 0;
  matrix[0][4] = 0;

  matrix[1][0] = 1;
  matrix[1][1] = 22; // Actual Moderate, Predicted Moderate
  matrix[1][2] = 1;
  matrix[1][3] = 1;
  matrix[1][4] = 0;

  matrix[2][0] = 1;
  matrix[2][1] = 1;
  matrix[2][2] = 25; // Actual High, Predicted High (more accurate)
  matrix[2][3] = 1;
  matrix[2][4] = 1;

  matrix[3][0] = 0;
  matrix[3][1] = 1;
  matrix[3][2] = 1;
  matrix[3][3] = 15; // Actual Severe, Predicted Severe
  matrix[3][4] = 1;

  matrix[4][0] = 0;
  matrix[4][1] = 0;
  matrix[4][2] = 1;
  matrix[4][3] = 1;
  matrix[4][4] = 8;  // Actual Extreme, Predicted Extreme
  
  return matrix;
};

export function ConfusionMatrixChart() {
  const [matrixData, setMatrixData] = useState<number[][] | null>(null);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    setMatrixData(generateMockConfusionMatrix());
  }, []);

  if (!mounted || !matrixData) {
    return (
      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="text-xl font-headline flex items-center gap-2">
            <LayoutGrid className="h-6 w-6 text-primary" />
            <span>Confusion Matrix (Geoeffectiveness)</span>
          </CardTitle>
          <CardDescription>Model Performance: Actual vs. Predicted Levels</CardDescription>
        </CardHeader>
        <CardContent className="h-[280px] flex items-center justify-center">
          <p className="text-muted-foreground">Loading chart data...</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-lg">
      <CardHeader>
        <CardTitle className="text-xl font-headline flex items-center gap-2">
          <LayoutGrid className="h-6 w-6 text-primary" />
          <span>Confusion Matrix (Geoeffectiveness)</span>
        </CardTitle>
        <CardDescription>Model Performance: Actual vs. Predicted Levels</CardDescription>
      </CardHeader>
      <CardContent className="pt-4">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[150px] text-center font-semibold sticky left-0 bg-card z-10">Actual \ Predicted</TableHead>
              {categories.map((cat) => (
                <TableHead key={`pred-${cat}`} className="text-center font-semibold">{cat}</TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {matrixData.map((row, rowIndex) => (
              <TableRow key={`act-${categories[rowIndex]}`}>
                <TableHead className="text-center font-semibold sticky left-0 bg-card z-10">{categories[rowIndex]}</TableHead>
                {row.map((cellValue, colIndex) => (
                  <TableCell
                    key={`cell-${categories[rowIndex]}-${categories[colIndex]}`}
                    className={`text-center ${
                      rowIndex === colIndex ? 'bg-primary/20 font-bold text-primary-foreground' : ''
                    }`}
                  >
                    {cellValue}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
