// This is an autogenerated file from Firebase Studio.
'use client';

import React, { useState, useRef } from 'react';
import Image from 'next/image';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { handleSolarImageAnalysis, type SolarImageAnalysisResult as ServerActionResult } from '@/app/actions';
import type { SolarImageAnalysisDisplayResult } from '@/types';
import { ImageUp, Loader2, AlertTriangle, CheckCircle2 } from 'lucide-react';

export function SolarImageAnalysisCard() {
  const { toast } = useToast();
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [imagePreviewUrl, setImagePreviewUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<SolarImageAnalysisDisplayResult | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
      setAnalysisResult(null); // Clear previous results
    } else {
      setSelectedFile(null);
      setImagePreviewUrl(null);
    }
  };

  const handleSubmit = async () => {
    if (!selectedFile || !imagePreviewUrl) {
      toast({
        variant: 'destructive',
        title: 'No Image Selected',
        description: 'Please select an image file to analyze.',
      });
      return;
    }

    setIsLoading(true);
    setAnalysisResult(null);

    try {
      const result: ServerActionResult = await handleSolarImageAnalysis(imagePreviewUrl);

      if (result.error) {
        toast({
          variant: 'destructive',
          title: 'Analysis Error',
          description: result.error,
        });
      } else if (result.data) {
        setAnalysisResult({
          ...result.data,
          timestamp: new Date().toISOString(),
          imagePreviewUrl: imagePreviewUrl, // Keep the preview for the result display
        });
        toast({
          title: 'Analysis Successful',
          description: `Danger Assessment: ${result.data.dangerAssessment}`,
        });
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';
      toast({
        variant: 'destructive',
        title: 'Submission Error',
        description: errorMessage,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const getDangerStyles = (assessment?: string) => {
    switch (assessment?.toLowerCase()) {
      case 'low':
        return { icon: <CheckCircle2 className="h-5 w-5 text-green-500" />, color: 'text-green-500' };
      case 'moderate':
        return { icon: <AlertTriangle className="h-5 w-5 text-yellow-500" />, color: 'text-yellow-500' };
      case 'high':
        return { icon: <AlertTriangle className="h-5 w-5 text-orange-500" />, color: 'text-orange-500' };
      case 'severe':
        return { icon: <AlertTriangle className="h-5 w-5 text-red-600" />, color: 'text-red-600' };
      case 'extreme':
        return { icon: <AlertTriangle className="h-5 w-5 text-purple-600" />, color: 'text-purple-600' };
      default:
        return { icon: null, color: 'text-foreground' };
    }
  };
  
  const dangerStyle = getDangerStyles(analysisResult?.dangerAssessment);

  return (
    <Card className="shadow-lg">
      <CardHeader>
        <CardTitle className="text-xl font-headline flex items-center gap-2">
          <ImageUp className="h-6 w-6 text-accent" />
          <span>Solar Image Analysis</span>
        </CardTitle>
        <CardDescription>Upload a satellite image of solar activity for AI-powered danger assessment.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="solar-image-upload" className="mb-2 block">Upload Satellite Image</Label>
          <Input
            id="solar-image-upload"
            type="file"
            accept="image/*"
            ref={fileInputRef}
            onChange={handleFileChange}
            className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20"
          />
        </div>

        {imagePreviewUrl && !analysisResult?.imagePreviewUrl && (
          <div className="mt-4 p-2 border border-dashed border-border rounded-md">
            <Image
              src={imagePreviewUrl}
              alt="Selected solar image preview"
              width={400}
              height={300}
              className="rounded-md object-contain max-h-[300px] w-auto mx-auto"
              data-ai-hint="solar activity"
            />
          </div>
        )}

        <Button onClick={handleSubmit} disabled={isLoading || !selectedFile} className="w-full">
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Analyzing Image...
            </>
          ) : (
            <>
              <ImageUp className="mr-2 h-4 w-4" />
              Analyze Solar Image
            </>
          )}
        </Button>

        {isLoading && (
          <div className="text-center text-muted-foreground">
            <p>AI is analyzing the image. This may take a few moments...</p>
          </div>
        )}

        {analysisResult && (
          <div className="space-y-4 pt-4 border-t border-border">
             {analysisResult.imagePreviewUrl && (
              <div className="mt-4 p-2 border border-dashed border-border rounded-md">
                <Image
                  src={analysisResult.imagePreviewUrl}
                  alt="Analyzed solar image"
                  width={400}
                  height={300}
                  className="rounded-md object-contain max-h-[300px] w-auto mx-auto"
                   data-ai-hint="solar activity"
                />
              </div>
            )}
            <h3 className="text-lg font-semibold flex items-center gap-2">
              Analysis Result
              {dangerStyle.icon}
            </h3>
            <div>
              <p className="font-medium">Danger Assessment:</p>
              <p className={`text-2xl font-bold ${dangerStyle.color}`}>{analysisResult.dangerAssessment}</p>
            </div>
            <div>
              <p className="font-medium">Detailed Analysis:</p>
              <p className="text-sm text-muted-foreground whitespace-pre-wrap">{analysisResult.detailedAnalysis}</p>
            </div>
            <p className="text-xs text-muted-foreground">
              Analyzed as of: {new Date(analysisResult.timestamp).toLocaleString()}
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
