// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Kp-index forecasting flow using a pre-trained ML model.
 *
 * - forecastKpIndex - A function that handles the Kp-index forecasting process.
 * - KpIndexForecastingInput - The input type for the forecastKpIndex function.
 * - KpIndexForecastingOutput - The return type for the forecastKpIndex function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const KpIndexForecastingInputSchema = z.object({
  solarWindData: z.object({
    bz: z.number().describe('Bz GSM value (nT)'),
    bt: z.number().describe('Bt value (nT)'),
    speed: z.number().describe('Solar wind speed (km/s)'),
    density: z.number().describe('Solar wind density (protons/cm^3)'),
    dst: z.number().describe('Dst index (nT)'),
  }).describe('Solar wind data'),
  modelDataUri: z
    .string()
    .describe(
      "A data URI containing the pre-trained ML model. Must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type KpIndexForecastingInput = z.infer<typeof KpIndexForecastingInputSchema>;

const KpIndexForecastingOutputSchema = z.object({
  kpIndex: z.number().describe('The predicted Kp-index value.'),
  geoeffectiveness: z.string().describe('The predicted geoeffectiveness level (e.g., Low, Moderate, High).'),
});
export type KpIndexForecastingOutput = z.infer<typeof KpIndexForecastingOutputSchema>;

export async function forecastKpIndex(input: KpIndexForecastingInput): Promise<KpIndexForecastingOutput> {
  return kpIndexForecastingFlow(input);
}

const prompt = ai.definePrompt({
  name: 'kpIndexForecastingPrompt',
  input: {schema: KpIndexForecastingInputSchema},
  output: {schema: KpIndexForecastingOutputSchema},
  prompt: `You are an expert space weather forecaster. Use the provided solar wind data and the pre-trained ML model to predict the Kp-index and geoeffectiveness level.

Solar Wind Data:
Bz: {{{solarWindData.bz}}} nT
Bt: {{{solarWindData.bt}}} nT
Speed: {{{solarWindData.speed}}} km/s
Density: {{{solarWindData.density}}} protons/cm^3
Dst: {{{solarWindData.dst}}} nT

ML Model: {{media url=modelDataUri}}

Based on this information, predict the Kp-index and geoeffectiveness level.
Ensure that the geoeffectiveness level is one of: Low, Moderate, High, Severe, Extreme.
`,
});

const kpIndexForecastingFlow = ai.defineFlow(
  {
    name: 'kpIndexForecastingFlow',
    inputSchema: KpIndexForecastingInputSchema,
    outputSchema: KpIndexForecastingOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
