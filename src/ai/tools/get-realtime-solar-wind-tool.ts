
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A Genkit tool to fetch real-time solar wind data from NOAA SWPC.
 *
 * - getRealtimeSolarWindDataTool - Fetches the latest solar wind parameters.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { SolarWindDataInput } from '@/types';

const RealtimeSolarWindDataOutputSchema = z.object({
  bz: z.number().describe('Bz GSM value (nT)'),
  bt: z.number().describe('Bt value (nT)'),
  speed: z.number().describe('Solar wind speed (km/s)'),
  density: z.number().describe('Solar wind density (protons/cm^3)'),
  dst: z.number().describe('Dst index (nT)'),
});

// Default mock data to use as a fallback or if APIs fail.
// These values are set to represent calm solar conditions.
const defaultMockData: SolarWindDataInput = {
  bz: 2.0,    // Slightly northward or near zero
  bt: 5.0,    // Low total magnetic field strength
  speed: 350, // Average to low solar wind speed
  density: 5.0, // Average solar wind density
  dst: -10,   // Quiet to unsettled geomagnetic conditions
};

export const getRealtimeSolarWindDataTool = ai.defineTool(
  {
    name: 'getRealtimeSolarWindDataTool',
    description: 'Fetches the latest real-time solar wind data parameters (Bz, Bt, speed, density, Dst) from NOAA SWPC. Falls back to simulated calm-activity data if API fetch fails or data is invalid.',
    inputSchema: z.object({}), // No input needed to fetch "latest"
    outputSchema: RealtimeSolarWindDataOutputSchema,
  },
  async (): Promise<SolarWindDataInput> => {
    console.log('Attempting to fetch real-time solar wind data from NOAA SWPC...');

    try {
      // --- Fetch Magnetic Field Data (Bz, Bt) ---
      // API Docs: https://services.swpc.noaa.gov/products/solar-wind/
      // Data: [time_tag, bx_gsm, by_gsm, bz_gsm, bt, lat_gsm, lon_gsm, source]
      const magResponse = await fetch('https://services.swpc.noaa.gov/json/solar-wind/mag_5m.json', { cache: 'no-store' }); // Using 5-minute resolution
      if (!magResponse.ok) {
        console.warn(`NOAA Mag API request failed with status ${magResponse.status}`);
        throw new Error('Failed to fetch magnetic field data');
      }
      const magData = await magResponse.json();
      // The first entry is a header, the last entry in the array is the latest data.
      // Indices: bz_gsm is 3, bt is 4
      const latestMagEntry = magData && magData.length > 1 ? magData[magData.length - 1] : null;
      let bz = latestMagEntry && latestMagEntry[3] !== null ? parseFloat(latestMagEntry[3]) : defaultMockData.bz;
      let bt = latestMagEntry && latestMagEntry[4] !== null ? parseFloat(latestMagEntry[4]) : defaultMockData.bt;
      
      if (latestMagEntry === null || isNaN(bz) || isNaN(bt)) {
          console.warn('NOAA Mag API returned invalid or null Bz/Bt values, using fallback.', latestMagEntry);
          bz = defaultMockData.bz;
          bt = defaultMockData.bt;
      }


      // --- Fetch Plasma Data (Speed, Density) ---
      // Data: [time_tag, density, speed, temperature, source]
      const plasmaResponse = await fetch('https://services.swpc.noaa.gov/json/solar-wind/plasma_5m.json', { cache: 'no-store' }); // Using 5-minute resolution
      if (!plasmaResponse.ok) {
        console.warn(`NOAA Plasma API request failed with status ${plasmaResponse.status}`);
        throw new Error('Failed to fetch plasma data');
      }
      const plasmaData = await plasmaResponse.json();
      // Indices: density is 1, speed is 2
      const latestPlasmaEntry = plasmaData && plasmaData.length > 1 ? plasmaData[plasmaData.length - 1] : null;
      let density = latestPlasmaEntry && latestPlasmaEntry[1] !== null ? parseFloat(latestPlasmaEntry[1]) : defaultMockData.density;
      let speed = latestPlasmaEntry && latestPlasmaEntry[2] !== null ? parseFloat(latestPlasmaEntry[2]) : defaultMockData.speed;
       if (latestPlasmaEntry === null || isNaN(density) || isNaN(speed)) {
          console.warn('NOAA Plasma API returned invalid or null density/speed values, using fallback.', latestPlasmaEntry);
          density = defaultMockData.density;
          speed = defaultMockData.speed;
      }

      // --- Fetch Dst Index Data ---
      // Data: [time_tag, dst, source]
      // Using the last 30 days of hourly final Dst data as an example. A more real-time source might be better for true live Dst.
      const dstResponse = await fetch('https://services.swpc.noaa.gov/json/kyoto_dst_1_hour.json', { cache: 'no-store' }); // Hourly final Dst
      if (!dstResponse.ok) {
        console.warn(`NOAA Dst API request failed with status ${dstResponse.status}`);
        throw new Error('Failed to fetch Dst index data');
      }
      const dstData = await dstResponse.json();
      // Index: dst is 1
      const latestDstEntry = dstData && dstData.length > 1 ? dstData[dstData.length - 1] : null;
      let dst = latestDstEntry && latestDstEntry[1] !== null ? parseFloat(latestDstEntry[1]) : defaultMockData.dst;
      if (latestDstEntry === null || isNaN(dst)) {
          console.warn('NOAA Dst API returned invalid or null Dst value, using fallback.', latestDstEntry);
          dst = defaultMockData.dst;
      }


      console.log('Successfully fetched and parsed real-time solar wind data from NOAA SWPC.');
      return {
        bz,
        bt,
        speed,
        density,
        dst,
      };

    } catch (error) {
      console.error('Error fetching or parsing real-time solar wind data:', error);
      console.log('Falling back to simulated real-time data (Calm Activity).');
      return defaultMockData;
    }
  }
);

// For local testing of this tool, you can uncomment this:
// async function testTool() {
//   const data = await getRealtimeSolarWindDataTool({});
//   console.log("Fetched data:", data);
// }
// testTool();

