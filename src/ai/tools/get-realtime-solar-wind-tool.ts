
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A Genkit tool to fetch real-time solar wind data from NOAA SWPC.
 *
 * - getRealtimeSolarWindDataTool - Fetches the latest solar wind parameters.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { SolarWindDataInput } from '@/types';

const RealtimeSolarWindDataOutputSchema = z.object({
  bz: z.number().describe('Bz GSM value (nT)'),
  bt: z.number().describe('Bt value (nT)'),
  speed: z.number().describe('Solar wind speed (km/s)'),
  density: z.number().describe('Solar wind density (protons/cm^3)'),
  dst: z.number().describe('Dst index (nT)'),
});

// Default mock data to use as a fallback or if APIs fail.
// These values are set to represent "unsettled calm" solar conditions, potentially leading to Kp ~3.
const defaultMockData: SolarWindDataInput = {
  bz: -1.0,   // Slightly southward
  bt: 6.0,    // Slightly elevated total magnetic field strength
  speed: 400, // Average solar wind speed
  density: 6.0, // Slightly elevated solar wind density
  dst: -15,   // Slightly disturbed geomagnetic conditions
};

export const getRealtimeSolarWindDataTool = ai.defineTool(
  {
    name: 'getRealtimeSolarWindDataTool',
    description: 'Fetches the latest real-time solar wind data parameters (Bz, Bt, speed, density, Dst) from NOAA SWPC. Falls back to simulated calm-activity data if API fetch fails or data is invalid.',
    inputSchema: z.object({}), // No input needed to fetch "latest"
    outputSchema: RealtimeSolarWindDataOutputSchema,
  },
  async (): Promise<SolarWindDataInput> => {
    console.log('Attempting to fetch real-time solar wind data from NOAA SWPC...');
    let fetchedBz = defaultMockData.bz, 
        fetchedBt = defaultMockData.bt, 
        fetchedSpeed = defaultMockData.speed, 
        fetchedDensity = defaultMockData.density, 
        fetchedDst = defaultMockData.dst;
    let magFetchSuccess = false;
    let plasmaFetchSuccess = false;
    let dstFetchSuccess = false;

    try {
      // --- Fetch Magnetic Field Data (Bz, Bt) ---
      // API Docs: https://services.swpc.noaa.gov/products/solar-wind/
      // Data: [time_tag, bx_gsm, by_gsm, bz_gsm, bt, lat_gsm, lon_gsm, source]
      const magResponse = await fetch('https://services.swpc.noaa.gov/json/solar-wind/mag_5m.json', { cache: 'no-store' }); // Using 5-minute resolution
      if (!magResponse.ok) {
        console.warn(`NOAA Mag API request failed with status ${magResponse.status}, using fallback for mag data.`);
      } else {
        const magData = await magResponse.json();
        const latestMagEntry = magData && magData.length > 1 ? magData[magData.length - 1] : null;
        const bzVal = latestMagEntry && latestMagEntry[3] !== null ? parseFloat(latestMagEntry[3]) : NaN;
        const btVal = latestMagEntry && latestMagEntry[4] !== null ? parseFloat(latestMagEntry[4]) : NaN;

        if (latestMagEntry !== null && !isNaN(bzVal) && !isNaN(btVal)) {
          fetchedBz = bzVal;
          fetchedBt = btVal;
          magFetchSuccess = true;
          console.log('Successfully fetched Bz and Bt from NOAA.');
        } else {
          console.warn('NOAA Mag API returned invalid or null Bz/Bt values, using fallback for mag data.', latestMagEntry);
        }
      }
    } catch (error) {
      console.error('Error fetching magnetic field data:', error, 'Using fallback for mag data.');
    }

    try {
      // --- Fetch Plasma Data (Speed, Density) ---
      // Data: [time_tag, density, speed, temperature, source]
      const plasmaResponse = await fetch('https://services.swpc.noaa.gov/json/solar-wind/plasma_5m.json', { cache: 'no-store' }); // Using 5-minute resolution
      if (!plasmaResponse.ok) {
        console.warn(`NOAA Plasma API request failed with status ${plasmaResponse.status}, using fallback for plasma data.`);
      } else {
        const plasmaData = await plasmaResponse.json();
        const latestPlasmaEntry = plasmaData && plasmaData.length > 1 ? plasmaData[plasmaData.length - 1] : null;
        const densityVal = latestPlasmaEntry && latestPlasmaEntry[1] !== null ? parseFloat(latestPlasmaEntry[1]) : NaN;
        const speedVal = latestPlasmaEntry && latestPlasmaEntry[2] !== null ? parseFloat(latestPlasmaEntry[2]) : NaN;
        
        if (latestPlasmaEntry !== null && !isNaN(densityVal) && !isNaN(speedVal)) {
          fetchedDensity = densityVal;
          fetchedSpeed = speedVal;
          plasmaFetchSuccess = true;
          console.log('Successfully fetched density and speed from NOAA.');
        } else {
          console.warn('NOAA Plasma API returned invalid or null density/speed values, using fallback for plasma data.', latestPlasmaEntry);
        }
      }
    } catch (error) {
      console.error('Error fetching plasma data:', error, 'Using fallback for plasma data.');
    }
    
    try {
      // --- Fetch Dst Index Data ---
      // Data: [time_tag, dst, source]
      const dstResponse = await fetch('https://services.swpc.noaa.gov/json/kyoto_dst_1_hour.json', { cache: 'no-store' }); // Hourly final Dst
      if (!dstResponse.ok) {
        console.warn(`NOAA Dst API request failed with status ${dstResponse.status}, using fallback for Dst data.`);
      } else {
        const dstData = await dstResponse.json();
        const latestDstEntry = dstData && dstData.length > 1 ? dstData[dstData.length - 1] : null;
        const dstVal = latestDstEntry && latestDstEntry[1] !== null ? parseFloat(latestDstEntry[1]) : NaN;

        if (latestDstEntry !== null && !isNaN(dstVal)) {
          fetchedDst = dstVal;
          dstFetchSuccess = true;
          console.log('Successfully fetched Dst from NOAA.');
        } else {
          console.warn('NOAA Dst API returned invalid or null Dst value, using fallback for Dst data.', latestDstEntry);
        }
      }
    } catch (error) {
      console.error('Error fetching Dst index data:', error, 'Using fallback for Dst data.');
    }

    if (magFetchSuccess && plasmaFetchSuccess && dstFetchSuccess) {
      console.log('Successfully fetched and parsed all real-time solar wind data from NOAA SWPC.');
    } else {
      console.warn('One or more NOAA API calls failed or returned invalid data. Result includes fallback values.');
    }

    return {
      bz: fetchedBz,
      bt: fetchedBt,
      speed: fetchedSpeed,
      density: fetchedDensity,
      dst: fetchedDst,
    };
  }
);

// For local testing of this tool, you can uncomment this:
// async function testTool() {
//   const data = await getRealtimeSolarWindDataTool({});
//   console.log("Fetched data:", data);
// }
// testTool();
